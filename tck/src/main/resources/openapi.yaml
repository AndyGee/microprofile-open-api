# Copyright (c) 2017 Contributors to the Eclipse Foundation
# <p>
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# <p>
# http://www.apache.org/licenses/LICENSE-2.0
# <p>
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
 
openapi: 3.0.0
info:
  title: Callback Example
  version: 1.0.0
components:
  schemas:
    Bookings:
      title: Bookings
      type: array
    Airlines:
      title: Airlines
      type: array
    AirlinesRef:
      $ref: '#/components/schemas/Airlines'
  responses:
    FoundAirlines:
      description: successfully found airlines
      content:
        application/json:
          schema:
            type: array
    FoundBookings:
      description: Bookings retrieved
      content:
        application/json:
          schema:
            type: array
  parameters:
    departureDate:
      name: departureDate
      in: query
      description: Customer departure date
      required: true
      schema:
        type: string
    username:
      name: username
      in: query
      description: The name that needs to be deleted
      required: true
      schema:
        type: string
  examples:
    review:
      summary: External review example
      description: This example exemplifies the content on our site.
      externalValue: http://foo.bar/examples/review-example.json
    user:
      summary: External user example
      externalValue: http://foo.bar/examples/user-example.json
  requestBodies:
    review:
      description: example review to add
      content:
        application/json:
          schema:
            $ref: org.eclipse.microprofile.openapi.apps.airlines.model.Review
      required: true
  headers:
    Max-Rate:
      description: Maximum rate
      required: true
      deprecated: true
      allowEmptyValue: true
      schema:
        type: integer
    Request-Limit:
      description: The number of allowed requests in the current period
      schema:
        type: integer
  securitySchemes:
    httpTestScheme:
      type: http
      description: user security scheme
      scheme: testScheme
    bookingSecurityScheme:
      type: openIdConnect
      description: Security Scheme for booking resource
      openIdConnectUrl: http://openidconnect.com/testurl
    airlinesRatingApp_auth:
      type: apiKey
      description: authentication needed to access Airlines app
      name: api_key
      in: header
    reviewoauth2:
      type: oauth2
      description: authentication needed to create and delete reviews
      flows:
        implicit:
          authorizationUrl: https://example.com/api/oauth/dialog
          scopes:
            write:reviews: create a review
        password:
          tokenUrl: https://example.com/api/oauth/token
          refreshUrl: https://example.com/api/oauth/refresh
        clientCredentials:
          tokenUrl: https://example.com/api/oauth/token
          scopes:
            read:reviews: search for a review
        authorizationCode:
          authorizationUrl: https://example.com/api/oauth/dialog
          tokenUrl: https://example.com/api/oauth/token
    httpSchemeForTest:
      type: http
      description: user security scheme
      scheme: testScheme
  links:
    UserName:
      operationId: getUserByName
      parameters:
        userId: {}
      description: The username corresponding to provided user id
  callbacks:
    GetBookings:
      'http://localhost:9080/airlines/bookings':
        summary: 'Retrieve all bookings for current user'
        responses:
          $ref: FoundBookings
paths:
  /streams:
    post:
      description: subscribes a client to receive out-of-band data
      parameters:
        - name: callbackUrl
          in: query
          required: true
          description: |
            the location where data will be sent.  Must be network accessible
            by the source server
          schema:
            type: string
            format: uri
            example: https://tonys-server.com
      responses:
        '201':
          description: subscription successfully created
          content:
            application/json:
              schema:
                description: subscription information
                required:
                  - subscriptionId
                properties:
                  subscriptionId:
                    description: this unique identifier allows management of the subscription
                    type: string
                    example: 2531329f-fb09-4ef7-887e-84e648214436
      callbacks:
        # the name `onData` is a convenience locator
        onData:
          # when data is sent, it will be sent to the `callbackUrl` provided
          # when making the subscription PLUS the suffix `/data`
          '{$request.query.callbackUrl}/data':
            post:
              requestBody:
                description: subscription payload
                content:
                  application/json:
                    schema:
                      properties:
                        timestamp:
                          type: string
                          format: date-time
                        userData:
                          type: string
              responses:
                '202':
                  description: |
                    Your server implementation should return this HTTP status code
                    if the data was received successfully
                '204':
                  description: |
                    Your server should return this HTTP status code if no longer interested
                    in further updates